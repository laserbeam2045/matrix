// import * as tf from '@tensorflow/tfjs'
const tf = require('@tensorflow/tfjs-node')

// TODO: まともなテストコードにしたい
const test_getRect = () => {
  // Tensor(例1: 入力)
  const tensor1 = tf.tensor(
    [[0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 33 , 92 , 92 , 32 , 0  , 0  ],
     [0, 0, 0, 0, 89 , 211, 219, 109, 14 , 0  ],
     [0, 0, 0, 0, 108, 234, 255, 173, 46 , 0  ],
     [0, 0, 0, 0, 83 , 211, 255, 221, 105, 12 ],
     [0, 0, 0, 0, 36 , 153, 244, 252, 179, 54 ],
     [0, 0, 0, 0, 3  , 80 , 204, 255, 233, 136],
     [0, 0, 0, 0, 0  , 23 , 119, 223, 255, 221],
     [0, 0, 0, 0, 0  , 0  , 32 , 125, 221, 255],
     [0, 0, 0, 0, 0  , 0  , 0  , 30 , 119, 217],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 26 , 118],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 29 ]]
  )

  {const tensor = tf.tensor(
   [[[0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 33 , 92 , 92 , 32 , 0  , 0  ],
     [0, 0, 0, 0, 89 , 211, 219, 109, 14 , 0  ],
     [0, 0, 0, 0, 108, 234, 255, 173, 46 , 0  ],
     [0, 0, 0, 0, 83 , 211, 255, 221, 105, 12 ],
     [0, 0, 0, 0, 36 , 153, 244, 252, 179, 54 ],
     [0, 0, 0, 0, 3  , 80 , 204, 255, 233, 136],
     [0, 0, 0, 0, 0  , 23 , 119, 223, 255, 221],
     [0, 0, 0, 0, 0  , 0  , 32 , 125, 221, 255],
     [0, 0, 0, 0, 0  , 0  , 0  , 30 , 119, 217],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 26 , 118],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 29 ]]]
  );
  const image = tensor.reshape([1, 20, 10, 1]);
  const boxes = [[0.4, 0.3, 1, 1]];
  const boxInd = [0];
  const cropSize = [12, 7];
  // const method = 'bilinear';
  const method = 'nearest';
  const image2 = tf.image.cropAndResize(image, boxes, boxInd, cropSize, method);
  image2.reshape([1, 12, 7]).print(1);}

  {const tensor = tf.tensor(
   [[[0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 33 , 92 , 92 , 32 , 0  , 0  ],
     [0, 0, 0, 0, 89 , 211, 219, 109, 14 , 0  ],
     [0, 0, 0, 0, 108, 234, 255, 173, 46 , 0  ],
     [0, 0, 0, 0, 83 , 211, 255, 221, 105, 12 ],
     [0, 0, 0, 0, 36 , 153, 244, 252, 179, 54 ],
     [0, 0, 0, 0, 3  , 80 , 204, 255, 233, 136],
     [0, 0, 0, 0, 0  , 23 , 119, 223, 255, 221],
     [0, 0, 0, 0, 0  , 0  , 32 , 125, 221, 255],
     [0, 0, 0, 0, 0  , 0  , 0  , 30 , 119, 217],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 26 , 118],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 29 ]]]
  );
  const images = tensor.reshape([1, 20, 10, 1]);
  const size = [10, 5];
  const alignCorners = true;
  const image2 = tf.image.resizeBilinear(images, size, alignCorners);
  image2.reshape([1, 10, 5]).round().print(1);}

  {const tensor = tf.tensor(
    [[0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 0  ],
     [0, 0, 0, 0, 33 , 92 , 92 , 32 , 0  , 0  ],
     [0, 0, 0, 0, 89 , 211, 219, 109, 14 , 0  ],
     [0, 0, 0, 0, 108, 234, 255, 173, 46 , 0  ],
     [0, 0, 0, 0, 83 , 211, 255, 221, 105, 12 ],
     [0, 0, 0, 0, 36 , 153, 244, 252, 179, 54 ],
     [0, 0, 0, 0, 3  , 80 , 204, 255, 233, 136],
     [0, 0, 0, 0, 0  , 23 , 119, 223, 255, 221],
     [0, 0, 0, 0, 0  , 0  , 32 , 125, 221, 255],
     [0, 0, 0, 0, 0  , 0  , 0  , 30 , 119, 217],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 26 , 118],
     [0, 0, 0, 0, 0  , 0  , 0  , 0  , 0  , 29 ]]
  );
    // // 水平方向に値を積算する
    // const sumH = tensor.cumsum(1, false, true)
    //                    .gather([0], 1)
    //                    .flatten()
    // // 垂直方向に値を積算する
    // const sumV = tensor1.transpose()
    //                     .cumsum(1, false, true)
    //                     .gather([0], 1)
    //                     .flatten()
    width = 10;
    heigh = 20;
    // 垂直方向に値を積算する
    const sumV = tensor.sum(0);
    // 水平方向に値を積算する
    const sumH = tensor.sum(1);
    sumV.print();
    sumV.mul(tf.range(0, width, 1)).print();
    sumH.print();
    sumH.mul(tf.range(0, heigh, 1)).print();
  }



  // Tensor(例2: 行ごとに右から左へ、値を積算した結果)
  // const tensor2 = tf.tensor(
  //   [[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ],
  //    [249, 249, 249, 249, 249, 216, 124, 32 , 0  , 0  ],
  //    [642, 642, 642, 642, 642, 553, 342, 123, 14 , 0  ],
  //    [816, 816, 816, 816, 816, 708, 474, 219, 46 , 0  ],
  //    [887, 887, 887, 887, 887, 804, 593, 338, 117, 12 ],
  //    [918, 918, 918, 918, 918, 882, 729, 485, 233, 54 ],
  //    [911, 911, 911, 911, 911, 908, 828, 624, 369, 136],
  //    [841, 841, 841, 841, 841, 841, 818, 699, 476, 221],
  //    [633, 633, 633, 633, 633, 633, 633, 601, 476, 255],
  //    [366, 366, 366, 366, 366, 366, 366, 366, 336, 217],
  //    [144, 144, 144, 144, 144, 144, 144, 144, 144, 118],
  //    [29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 ]]
  // )
  // // Tensor(例3: 行ごとの最終的な積算結果)
  // const tensor3 = tf.tensor(
  //   [[0  ],
  //    [0  ],
  //    [0  ],
  //    [0  ],
  //    [0  ],
  //    [0  ],
  //    [0  ],
  //    [0  ],
  //    [0  ],
  //    [249],
  //    [642],
  //    [816],
  //    [887],
  //    [918],
  //    [911],
  //    [841],
  //    [633],
  //    [366],
  //    [144],
  //    [29 ]]
  // )
  // // Tensor(例4: flatten)
  // const tensor4 = tf.tensor(
  //   [0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 642, 816, 887, 918, 911, 841, 633, 366, 144, 29]
  // )
  // // Tensor(例5: 例1の転置行列)
  // const tensor5 = tf.tensor(
  //   [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 89 , 108, 83 , 36 , 3  , 0  , 0  , 0  , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 211, 234, 211, 153, 80 , 23 , 0  , 0  , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 219, 255, 255, 244, 204, 119, 32 , 0  , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 109, 173, 221, 252, 255, 223, 125, 30 , 0  , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 14 , 46 , 105, 179, 233, 255, 221, 119, 26 , 0 ],
  //    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0  , 0  , 12 , 54 , 136, 221, 255, 217, 118, 29]]
  // )
  // // Tensor(例6: 例2と同じ操作)
  // const tensor6 = tf.tensor(
  //   [[0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0  , 0  , 0  , 0  , 0  , 0 ],
  //    [352 , 352 , 352 , 352 , 352 , 352 , 352 , 352 , 352 , 352 , 319 , 230 , 122 , 39  , 3  , 0  , 0  , 0  , 0  , 0 ],
  //    [1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 912 , 701 , 467 , 256 , 103, 23 , 0  , 0  , 0  , 0 ],
  //    [1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1328, 1109, 854 , 599 , 355, 151, 32 , 0  , 0  , 0 ],
  //    [1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1388, 1279, 1106, 885 , 633, 378, 155, 30 , 0  , 0 ],
  //    [1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1184, 1138, 1033, 854, 621, 366, 145, 26 , 0 ],
  //    [1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1030, 976, 840, 619, 364, 147, 29]]
  // )
  // Tensor(例7: 例3と同じ操作)
  // const tensor7 = tf.tensor(
  //   [[0   ],
  //    [0   ],
  //    [0   ],
  //    [0   ],
  //    [352 ],
  //    [1004],
  //    [1420],
  //    [1420],
  //    [1198],
  //    [1042]]
  // )
  // // Tensor(例8: 例4と同じ操作)
  // const tensor8 = tf.tensor(
  //   [0, 0, 0, 0, 352, 1004, 1420, 1420, 1198, 1042]
  // )

  // 水平方向に値を積算する
  const sumH = tensor1.cumsum(1, false, true)              // (例2)
                      .gather([0], 1)                      // (例3)
                      .flatten()                           // (例4)
  // 垂直方向に値を積算する
  const sumV = tensor1.transpose()                         // (例5)
                      .cumsum(1, false, true)              // (例6)
                      .gather([0], 1)                      // (例7)
                      .flatten()                           // (例8)

  // 端から数えたときに最初にデータが存在する位置を求める
  const top = sumH.dataSync().findIndex(num => num)
  const left = sumV.dataSync().findIndex(num => num)
  const right = sumV.dataSync().reverse().findIndex(num => num)
  const bottom = sumH.dataSync().reverse().findIndex(num => num)

  // 描画領域のサイズ
  const width = 10 - (left + right)
  const height = 20 - (top + bottom)

  // 端から数えたときに最初にデータが存在する位置を求める処理の検証
  tf.util.assert(top === 9, 'Not equal 1')
  tf.util.assert(left === 4, 'Not equal 2')
  tf.util.assert(right === 0, 'Not equal 3')
  tf.util.assert(bottom === 0, 'Not equal 4')

  // 描画領域のサイズを求める処理の検証
  tf.util.assert(width === 6, 'Not equal 5')
  tf.util.assert(height === 11, 'Not equal 6')
}

test_getRect()